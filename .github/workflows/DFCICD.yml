name: Build and Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGION: asia-southeast2
  IMAGE_NAME: asia-southeast2-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPOSITORY }}/dfresearch
  MODELS_IMAGE_NAME: ${{ secrets.DOCKER_REPOSITORY }}
  LIBTORCH_VERSION: "2.7.0"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
    permissions:
      contents: 'read'
      id-token: 'write'
      actions: 'write'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.WORKLOAD_IDENTITY_POOL }}/providers/github-provider"
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK and Docker
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker $REGION-docker.pkg.dev
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache and Download LibTorch
        id: cache-libtorch
        uses: actions/cache@v4
        with:
          path: libtorch
          key: ${{ runner.os }}-libtorch-${{ env.LIBTORCH_VERSION }}

      - name: Download LibTorch if not cached
        if: steps.cache-libtorch.outputs.cache-hit != 'true'
        run: |
          echo "Downloading LibTorch..."
          wget -q https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-${{ env.LIBTORCH_VERSION }}%2Bcpu.zip
          unzip -q libtorch-cxx11-abi-shared-with-deps-${{ env.LIBTORCH_VERSION }}+cpu.zip
          rm libtorch-cxx11-abi-shared-with-deps-${{ env.LIBTORCH_VERSION }}+cpu.zip

      - name: Pull model container from Docker Hub
        run: |
          docker pull ${{ env.MODELS_IMAGE_NAME }}:latest
          docker tag ${{ env.MODELS_IMAGE_NAME }}:latest models:latest

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            LIBTORCH=/opt/libtorch
            LIBTORCH_LIB=/opt/libtorch
            LD_LIBRARY_PATH=/opt/libtorch/lib
            CXXFLAGS=-std=c++17
            CARGO_JOBS=$(nproc)
            MODELS_IMAGE=${{ env.MODELS_IMAGE_NAME }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Deploy to Cloud Run
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          gcloud run deploy ${{ secrets.SERVICE }} \
            --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --set-env-vars="LIBTORCH=/opt/libtorch" \
            --set-env-vars="LIBTORCH_LIB=/opt/libtorch" \
            --set-env-vars="LD_LIBRARY_PATH=/opt/libtorch/lib" \
            --set-env-vars="CXXFLAGS=-std=c++17" \
            --set-env-vars="RUST_LOG=info" \
            --set-env-vars="AWS_REGION=${{ secrets.AWS_REGION }}" \
            --set-env-vars="AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --set-env-vars="AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --set-env-vars="DYNAMODB_USERS_TABLE=${{ secrets.DYNAMODB_USERS_TABLE }}" \
            --set-env-vars="DYNAMODB_IMAGES_TABLE=${{ secrets.DYNAMODB_IMAGES_TABLE }}" \
            --set-env-vars="DYNAMODB_INFERENCE_TABLE=${{ secrets.DYNAMODB_INFERENCE_TABLE }}" \
            --set-env-vars="S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" \
            --set-env-vars="BASE_URL=${{ secrets.BASE_URL }}" \
            --set-env-vars="COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}" \
            --set-env-vars="COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}" \
            --set-env-vars="COGNITO_CLIENT_SECRET=${{ secrets.COGNITO_CLIENT_SECRET }}" \
            --set-env-vars="COGNITO_DOMAIN=${{ secrets.COGNITO_DOMAIN }}" \
            --set-env-vars="COGNITO_REDIRECT_URI=${{ secrets.COGNITO_REDIRECT_URI }}" \
            --set-env-vars="JWT_SECRET=${{ secrets.JWT_SECRET }}" \
            --memory 2Gi \
            --cpu 2 \
            --timeout 600 \
            --max-instances 3 \
            --port 8081 \
            --no-cpu-throttling \
            --execution-environment gen2 \
            --cpu-boost

      - name: Show deployment URL
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Deployment completed."
